R2[[j]] <- data[traits[i]] + data[,traits[j]]
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
# Method based on Z = Y1 + Y2
re <-list(c(),c())
# Method based on Z = Y1 + Y2
re <-list()
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
re[[i,j]]<-data[traits[i]] + data[,traits[j]]
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
re[[i:j]]<-data[traits[i]] + data[,traits[j]]
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
# Method based on Z = Y1 + Y2
re <-matrix(,nrow = length(data),ncol = 4)
re
length(data)
# Method based on Z = Y1 + Y2
re <-matrix(,nrow = 32,ncol = 4)
re
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
re[[i:j]]<-data[traits[i]] + data[,traits[j]]
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
re
# Method based on Z = Y1 + Y2
re <-matrix(,nrow = 32,ncol = 4)
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
re[[i,j]]<-data[traits[i]] + data[,traits[j]]
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
# Method based on Z = Y1 + Y2
re <-matrix(,nrow = 32,ncol = 4)
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
re[i,j]<-data[traits[i]] + data[,traits[j]]
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
# Method based on Z = Y1 + Y2
re <-matrix(,nrow = 32,ncol = 4)
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
z<-data[traits[i]] + data[,traits[j]]
re[i,j] <- z
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
z
# Method based on Z = Y1 + Y2
re <-matrix(,nrow = 32,ncol = 4)
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
z<-data[traits[i]] + data[,traits[j]]
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
# Method based on Z = Y1 + Y2
re <-matrix(,nrow = 32,ncol = 4)
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
z<-data[traits[i]] + data[,traits[j]]
print(z)
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
z[3]
z[,3]
z[3,]
# Method based on Z = Y1 + Y2
re <-matrix(,nrow = 32,ncol = 4)
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
re<-data[traits[i]] + data[,traits[j]]
print(z)
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
re
# Method based on Z = Y1 + Y2
re <-matrix(,nrow = 32,ncol = 4)
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
re[i]<-data[traits[i]] + data[,traits[j]]
#print(z)
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
re
# Method based on Z = Y1 + Y2
re <-matrix(,nrow = 32,ncol = 4)
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
re[i, j]<-data[traits[i]] + data[,traits[j]]
#print(z)
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
re
# Method based on Z = Y1 + Y2
re <-list()
# Method based on Z = Y1 + Y2
re <-list()
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
re[,i,j]<-data[traits[i]] + data[,traits[j]]
#
#
#fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
z<-data[traits[i]] + data[,traits[j]]
fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
# Method based on Z = Y1 + Y2
re <-list()
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
z<-data[,traits[i]] + data[,traits[j]]
fm <- lme4::lmer(z ~ (1|g) + (1|r))
##vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
re
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
z<-data[,traits[i]] + data[,traits[j]]
fm <- lme4::lmer(z ~ (1|g) + (1|r))
vcz <- lme4::VarCorr(fm) # variance components for z = x + y
#G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
# P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
# Method based on Z = Y1 + Y2
re <-list()
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
z<-data[,traits[i]] + data[,traits[j]]
fm <- lme4::lmer(z ~ (1|g) + (1|r))
vcz <- lme4::VarCorr(fm) # variance components for z = x + y
G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
G
resul
corr_x1
P
d1 <- diag(diag(G)^{-0.5}, nt, nt)
d2 <- diag(diag(P)^{-0.5}, nt, nt)
GC <- d1 %*% G %*% d1 # Genotypic correlation matrix
PC <- d2 %*% P %*% d2 # Phenotypic correlation matrix
PC
GC
corr_x1
PC
G
gen_var
cov_var
cov_x1
GC
GC
PC
list(G.Cov = G, P.Cov = P, G.Cor = GC, P.Cor = PC)
cov_var
gen_var
cov_x1
ner <- length(data)
cl <- list() # correlation list
for (i in 1:ner)
cl[[i]] <- cor(data[[i]][, 1:nt], use = "pairwise.complete.obs")
df <- data[, c(sapply(traits, c), rep)]
df <- data[,c(sapply(traits, c), rep)]
P
P
G[1, 1]
P[1, 1]
d1
36.416227601^0.5
nt
diag(G)^0.5
GC
d1
data(names)
names(data)
traits <- c("ears" ,"len"  ,   "weight"  ,"yield" )
rep <- as.character(data$rep)
rep
lt <- length(traits) # number of traits
lt
n_g <- length(unique(g)) # number of genotypes
n_g
lt
leng_traits<- length(traits) # number of traits
nrep
nrep <- length(unique(r)) # number of replications in each environment
nrep <- length(unique(rep)) # number of replications in each environment
nrep
nrep <- length(as.factor(data$rep)) # number of replications in each environment
nrep
data$rep
as.factor(data$rep)
nrep <- levels(as.factor(data$rep)) # number of replications in each environment
nrep
nrep <- length(as.factor(data$rep)) # number of replications in each environment
nrep
rep
for (i in 1:nt) {
y <- data[,traits[i]]
fm <- lme4::lmer(y ~ (1|geno) + (1|rep))
vc <- lme4::VarCorr(fm)
G[i, i] <- vc$g[1]
P[i, i] <- vc$g[1] + attr(vc, "sc")^2 / nrep
}
geno <- as.character(data$Parents)
rep <- as.character(data$rep)
for (i in 1:nt) {
y <- data[,traits[i]]
fm <- lme4::lmer(y ~ (1|geno) + (1|rep))
vc <- lme4::VarCorr(fm)
G[i, i] <- vc$g[1]
P[i, i] <- vc$g[1] + attr(vc, "sc")^2 / nrep
}
G
P
nrep
l_g <- length(unique(rep)) # number of genotypes
l_g
length(levels(as.factor(data$rep)))
l_g <- length(unique(rep)) # number of genotypes
l_g
l_g <-length(levels(as.factor(data$geno))) # number of genotypes
l_g
nrep <- length(levels(as.factor(data$rep))) # number of replications in each environment
nrep
l_g
geno
l_g <-length(levels(as.factor(data$Parents))) # number of genotypes
l_g
geno
rep <- length(levels(as.factor(data$rep))) # number of replications in each environment
rep
for (i in 1:nt) {
y <- data[,traits[i]]
fm <- lme4::lmer(y ~ (1|geno) + (1|rep))
vc <- lme4::VarCorr(fm)
G[i, i] <- vc$g[1]
P[i, i] <- vc$g[1] + attr(vc, "sc")^2 /rep
}
rep <- as.character(data$rep)
nrep <- length(levels(as.factor(data$rep))) # number of replications in each environment
for (i in 1:nt) {
y <- data[,traits[i]]
fm <- lme4::lmer(y ~ (1|geno) + (1|rep))
vc <- lme4::VarCorr(fm)
G[i, i] <- vc$g[1]
P[i, i] <- vc$g[1] + attr(vc, "sc")^2 /nrep
}
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
z<-data[,traits[i]] + data[,traits[j]]
fm <- lme4::lmer(z ~ (1|g) + (1|r))
vcz <- lme4::VarCorr(fm) # variance components for z = x + y
G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
G
d1
d2
GC
PC
list(G.Cov = G, P.Cov = P, G.Cor = GC, P.Cor = PC)
list(Genetic_Cov = G, Pheno_Cov = P, Genetic_Cor = GC, Pheno_Cor = PC)
rs<- list(Genetic_Cov = G, Pheno_Cov = P, Genetic_Cor = GC, Pheno_Cor = PC)
rs
function(Traits,Entrada,Rep,data){
geno<-Entrada
rep <- rep
# Everything as character
geno <- as.character(data$Parents)
rep <- as.character(data$rep)
# Inits
leng_traits<- length(traits) # number of traits
G <- matrix(nrow = leng_traits, ncol = leng_traits) # genotypic covariance matrix
P <- matrix(nrow = leng_traits, ncol = leng_traits) # phenotypic covariance matrix
l_g <-length(levels(as.factor(data$Parents))) # number of genotypes
nrep <- length(levels(as.factor(data$rep))) # number of replications in each environment
# Fitted models by REML for variance components
for (i in 1:nt) {
y <- data[,traits[i]]
fm <- lme4::lmer(y ~ (1|geno) + (1|rep))
vc <- lme4::VarCorr(fm)
G[i, i] <- vc$g[1]
P[i, i] <- vc$g[1] + attr(vc, "sc")^2 /nrep
}
# Method based on Z = Y1 + Y2
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
z<-data[,traits[i]] + data[,traits[j]]
fm <- lme4::lmer(z ~ (1|g) + (1|r))
vcz <- lme4::VarCorr(fm) # variance components for z = x + y
G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
d1 <- diag(diag(G)^{-0.5}, nt, nt)
d2 <- diag(diag(P)^{-0.5}, nt, nt)
GC <- d1 %*% G %*% d1 # Genotypic correlation matrix
PC <- d2 %*% P %*% d2 # Phenotypic correlation matrix
# results
rs<- list(Genetic_Cov = G, Pheno_Cov = P, Genetic_Cor = GC, Pheno_Cor = PC)
}
co_ge<- function(Traits,Entrada,Rep,data){
geno<-Entrada
rep <- rep
# Everything as character
geno <- as.character(data$Parents)
rep <- as.character(data$rep)
# Inits
leng_traits<- length(traits) # number of traits
G <- matrix(nrow = leng_traits, ncol = leng_traits) # genotypic covariance matrix
P <- matrix(nrow = leng_traits, ncol = leng_traits) # phenotypic covariance matrix
l_g <-length(levels(as.factor(data$Parents))) # number of genotypes
nrep <- length(levels(as.factor(data$rep))) # number of replications in each environment
# Fitted models by REML for variance components
for (i in 1:nt) {
y <- data[,traits[i]]
fm <- lme4::lmer(y ~ (1|geno) + (1|rep))
vc <- lme4::VarCorr(fm)
G[i, i] <- vc$g[1]
P[i, i] <- vc$g[1] + attr(vc, "sc")^2 /nrep
}
# Method based on Z = Y1 + Y2
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
z<-data[,traits[i]] + data[,traits[j]]
fm <- lme4::lmer(z ~ (1|g) + (1|r))
vcz <- lme4::VarCorr(fm) # variance components for z = x + y
G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
d1 <- diag(diag(G)^{-0.5}, nt, nt)
d2 <- diag(diag(P)^{-0.5}, nt, nt)
GC <- d1 %*% G %*% d1 # Genotypic correlation matrix
PC <- d2 %*% P %*% d2 # Phenotypic correlation matrix
# results
rs<- list(Genetic_Cov = G, Pheno_Cov = P, Genetic_Cor = GC, Pheno_Cor = PC)
}
co_ge(Traits,data$Parents,data$rep,data)
rs
co_ge<- function(Traits,Entrada,Rep,data){
geno<-Entrada
rep <- rep
# Everything as character
geno <- as.character(data$Parents)
rep <- as.character(data$rep)
# Inits
leng_traits<- length(traits) # number of traits
G <- matrix(nrow = leng_traits, ncol = leng_traits) # genotypic covariance matrix
P <- matrix(nrow = leng_traits, ncol = leng_traits) # phenotypic covariance matrix
l_g <-length(levels(as.factor(data$Parents))) # number of genotypes
nrep <- length(levels(as.factor(data$rep))) # number of replications in each environment
# Fitted models by REML for variance components
for (i in 1:nt) {
y <- data[,traits[i]]
fm <- lme4::lmer(y ~ (1|geno) + (1|rep))
vc <- lme4::VarCorr(fm)
G[i, i] <- vc$g[1]
P[i, i] <- vc$g[1] + attr(vc, "sc")^2 /nrep
}
# Method based on Z = Y1 + Y2
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
z<-data[,traits[i]] + data[,traits[j]]
fm <- lme4::lmer(z ~ (1|g) + (1|r))
vcz <- lme4::VarCorr(fm) # variance components for z = x + y
G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
d1 <- diag(diag(G)^{-0.5}, nt, nt)
d2 <- diag(diag(P)^{-0.5}, nt, nt)
GC <- d1 %*% G %*% d1 # Genotypic correlation matrix
PC <- d2 %*% P %*% d2 # Phenotypic correlation matrix
# results
rs<- list(Genetic_Cov = G, Pheno_Cov = P, Genetic_Cor = GC, Pheno_Cor = PC)
print(rs)
}
co_ge(Traits,data$Parents,data$rep,data)
names(Traits)
names(traits)
traits <- c("ears" ,"len"  ,   "weight"  ,"yield" )
traits
names(GC) <- traits
GC
co_gp<- function(Traits,Entrada,Rep,data){
names(traits)
traits <- Traits
geno<-Entrada
rep <- rep
names(traits)
#
geno <- as.character(data$Parents)
rep <- as.character(data$rep)
# Creating the matrix  G and P
leng_traits<- length(traits) # number of traits
G <- matrix(nrow = leng_traits, ncol = leng_traits) # genotypic covariance matrix
P <- matrix(nrow = leng_traits, ncol = leng_traits) # phenotypic covariance matrix
l_g <-length(levels(as.factor(data$Parents))) # number of genotypes
nrep <- length(levels(as.factor(data$rep))) # number of replications in each environment
# Estimation of components of variance using the REML method.
for (i in 1:nt) {
y <- data[,traits[i]]
fm <- lme4::lmer(y ~ (1|geno) + (1|rep))
vc <- lme4::VarCorr(fm)
G[i, i] <- vc$g[1]
P[i, i] <- vc$g[1] + attr(vc, "sc")^2 /nrep
}
####Sum de each variable  and  estimation of  variance components
###Example X1+X2=X1X2, X1+X3=X1X3 etc
for (i in 1:(nt - 1)) {
for (j in (i + 1):nt) {
y<-data[,traits[i]] + data[,traits[j]]
fm <- lme4::lmer(y ~ (1|g) + (1|r))
vcz <- lme4::VarCorr(fm)
G[i, j] <- G[j, i] <- (vcz$g[1] - G[i, i] - G[j, j]) / 2
P[i, j] <- P[j, i] <- (vcz$g[1] + attr(vcz, "sc")^2 / nrep - P[i, i] - P[j, j]) / 2
}
}
d1 <- diag(diag(G)^{-0.5}, nt, nt)
d2 <- diag(diag(P)^{-0.5}, nt, nt)
GC <- d1 %*% G %*% d1 # Genotypic correlation matrix
PC <- d2 %*% P %*% d2 # Phenotypic correlation matrix
# results
resuls<- list(Genetic_Cov = G, Pheno_Cov = P, Genetic_Cor = GC, Pheno_Cor = PC)
print(rs)
}
traits <- c("ears" ,"len"  ,   "weight"  ,"yield" )
traits
co_ge(Traits,data$Parents,data$rep,data)
